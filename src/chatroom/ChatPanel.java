/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatroom;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.net.Socket;

import java.awt.*;
import javax.swing.border.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

import util.Util;

/**
 *
 * @author owo
 */
public class ChatPanel extends javax.swing.JPanel {

    private Socket mSock;
    private String target_name;
    private BufferedReader buf;
    private OutputStream send;
    private InputStream recv;

    private boolean isDisconnected = false;

    public static final int BUFLEN = 65536;
    /**
     * Creates new form ChatPanel
     */
    public ChatPanel(Socket sock, String name) {
        initComponents();
        // init the text panel
        jChatPane.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
        // prepare for the network
        this.mSock = sock;
        this.target_name = name;
        try {
            send = sock.getOutputStream();
            recv = sock.getInputStream();
            new Thread(new TCPReceive()).start();
            logInfo("Connected to [" + sock.getInetAddress().getHostAddress() + ":" + sock.getPort() + "]");
        } catch (Exception e) {
            logError("Failed to open input or output stream.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jChatScroll = new javax.swing.JScrollPane();
        jChatPane = new javax.swing.JTextPane();
        jSendButton = new javax.swing.JButton();
        jMessageText = new javax.swing.JTextField();
        jDisconnectButton = new javax.swing.JButton();
        jFlushButton = new javax.swing.JButton();
        jTeaButton = new javax.swing.JButton();

        jChatPane.setEditable(false);
        jChatScroll.setViewportView(jChatPane);

        jSendButton.setText("send");
        jSendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSendButtonMouseClicked(evt);
            }
        });

        jDisconnectButton.setText("disconnect");
        jDisconnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDisconnectButtonMouseClicked(evt);
            }
        });

        jFlushButton.setText("flush");
        jFlushButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFlushButtonMouseClicked(evt);
            }
        });

        jTeaButton.setText("tea");
        jTeaButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTeaButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jChatScroll)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jMessageText, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jFlushButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTeaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDisconnectButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jChatScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSendButton)
                    .addComponent(jMessageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDisconnectButton)
                    .addComponent(jFlushButton)
                    .addComponent(jTeaButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSendButtonMouseClicked
        // TODO add your handling code here:
        String msg = jMessageText.getText();
        if ("".equals(msg))
            return ;
        sendMsg(msg);
        jMessageText.removeAll();
    }//GEN-LAST:event_jSendButtonMouseClicked

    private void jDisconnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDisconnectButtonMouseClicked
        // TODO add your handling code here:
        disconnect();
    }//GEN-LAST:event_jDisconnectButtonMouseClicked

    private void jTeaButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTeaButtonMouseClicked
        // TODO add your handling code here:
        sendMsg("给dalao递茶");
    }//GEN-LAST:event_jTeaButtonMouseClicked

    private void jFlushButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFlushButtonMouseClicked
        // TODO add your handling code here:
        jChatPane.setText(null);
    }//GEN-LAST:event_jFlushButtonMouseClicked

    private void appendToPane(String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = jChatPane.getDocument().getLength();
        jChatPane.setCaretPosition(len);
        jChatPane.setCharacterAttributes(aset, false);
        jChatPane.replaceSelection(msg);
    }

    private void sendMsg(String msg) {
        try {
            String to_send = msg + Character.toString((char) 0); 
            send.write(to_send.getBytes());
            appendToPane("[" + Chatroom.username + "] " + to_send + '\n', Color.BLACK);
        } catch (Exception e) {
            logError("Exception when sending message: " + e.getClass());
        }
    }

    private void recvMsg(String msg) {
        appendToPane( "[" + target_name + "] " + msg + "\n", Color.BLUE);
    }

    private void logError(String msg) {
        appendToPane("[System] " + msg + '\n', Color.RED);
    }
    
    private void logInfo(String msg) {
        appendToPane("[System] " + msg + '\n', Color.GREEN);
    }

    private void sendLeave() {
        String msg = "finish" + Character.toString((char) 0);
        try {
            assert(msg.length() == 7);
            send.write(msg.getBytes());
            this.isDisconnected = true;
            logInfo("Disconnected from target machine.");
        } catch (Exception e) {
            Util.error("Leave: " + e.getCause());
        }
    }

    public void disconnect() {
        sendLeave();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane jChatPane;
    private javax.swing.JScrollPane jChatScroll;
    private javax.swing.JButton jDisconnectButton;
    private javax.swing.JButton jFlushButton;
    private javax.swing.JTextField jMessageText;
    private javax.swing.JButton jSendButton;
    private javax.swing.JButton jTeaButton;
    // End of variables declaration//GEN-END:variables

    class TCPReceive implements Runnable {
        
        public TCPReceive() {}

        @Override
        public void run() {
            while (true) {
                try {
                    if (isDisconnected) {
                        break;
                    }
                    if (mSock.isClosed()) {
                        break;
                    }
                    Util.info("Trying to read...");
                    byte[] cbuf = new byte[BUFLEN];
                    int n = recv.read(cbuf);
                    if (n == -1)
                        break;
                    //Util.info(String.valueOf(n));
                    recvMsg(new String(cbuf));
                } catch (Exception e) {}
            }
            Util.info("TCPReceive: quit!");
        }
    }

}